#include <iostream>   
using namespace std;  
enum enPrimNotPrime { Prime = 1, NotPrime = 2 };
enPrimNotPrime CheckPrime(int Number)
{
    // Compute M as roughly half of Number.
    // Note: Using round(Number / 2) here might not be the best approach
    // since for small numbers it may not be accurate; typically, we check until sqrt(Number).
    int M = round(Number / 2);

    // Loop from 2 to M to test for divisibility.
    for (int Counter = 2; Counter <= M; Counter++)
    {
        // If Number is divisible by any Counter, then it is not a prime.
        if (Number % Counter == 0)
            return enPrimNotPrime::NotPrime;  // Return NotPrime immediately.
    }

    // If no divisors were found, return Prime.
    return enPrimNotPrime::Prime;
}
int RandomNumber(int From, int To)
{
    // Calculate random number using modulus operator.
    int randNum = rand() % (To - From + 1) + From;
    return randNum;
}
void FillArray(int arr[100], int& arrLength)
{
    cout << "\nEnter number of elements:\n";
    cin >> arrLength;  

    
    for (int i = 0; i < arrLength; i++)
        arr[i] = RandomNumber(1, 100);
}

void CopyOnlyPrimaryNumbers(int arrSource[100], int arrDestination[100], int arrLength, int& arr2Lenght)
{
    int Counter = 0;  
    
    for (int i = 0; i < arrLength; i++)
    {
        
        if (CheckPrime(arrSource[i]) == enPrimNotPrime::Prime)
        {
            
            arrDestination[Counter] = arrSource[i];
            Counter++;  
        }
    }

   
    arr2Lenght = --Counter;
}
void PrintArray(int arr[100], int arrLength)
{

    for (int i = 0; i < arrLength; i++)
        cout << arr[i] << " ";

    cout << "\n";  
}

// Main function: Entry point of the program.
int main() {
    // Seed the random number generator with the current time to ensure different sequences on each run.
    srand((unsigned)time(NULL));

    int arr[100];      // Declare the source array.
    int arrLength;     // Will hold the number of elements in the source array.

    // Fill the source array with random numbers.
    FillArray(arr, arrLength);

    int arr2[100];     // Declare the destination array for prime numbers.
    int arr2Length = 0;  // Initialize the length of the destination array.

    // Copy only the prime numbers from the source array to the destination array.
    CopyOnlyPrimaryNumbers(arr, arr2, arrLength, arr2Length);

    // Print the source array.
    cout << "\nArray 1 elements:\n";
    PrintArray(arr, arrLength);

    // Print the destination array containing only prime numbers.
    cout << "\nPrime Numbers in Array2:\n";
    PrintArray(arr2, arr2Length);

    return 0;  // Return 0 to indicate successful program execution.
}
